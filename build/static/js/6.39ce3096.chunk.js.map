{"version":3,"sources":["components/UI/card/styles/Card.module.css","components/quotes/quoteForm/styles/QuoteForm.module.css","components/UI/card/Card.tsx","components/quotes/quoteForm/QuoteForm.tsx","pages/newQuote/NewQuote.tsx"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData","console","log"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,2FCKtHC,EAJF,SAACC,GACV,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC4EjCC,EApEG,SAACL,GACf,MAAoCM,oBAAS,GAA7C,mBAAmBC,GAAnB,WACMC,EAAiBC,iBAAyB,MAC1CC,EAAeD,iBAA4B,MAqBjD,OACI,cAAC,IAAME,SAAP,UAQI,cAAC,EAAD,UACI,uBACIC,QAfS,WACrBL,GAAc,IAeFN,UAAWC,IAAQW,KACnBC,SAhChB,SAA2BC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBT,EAAeU,QAASC,MACxCC,EAAcV,EAAaQ,QAASC,MAI1CnB,EAAMqB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAqBxC,UAKKpB,EAAMwB,WACH,qBAAKvB,UAAWC,IAAQuB,QAAxB,SACI,cAACC,EAAA,EAAD,MAIR,sBAAKzB,UAAWC,IAAQyB,QAAxB,UACI,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKvB,OAExC,sBAAKP,UAAWC,IAAQyB,QAAxB,UACI,uBAAOC,QAAQ,OAAf,kBACA,0BACIE,GAAG,OACHE,KAAM,EACND,IAAKrB,OAGb,qBAAKT,UAAWC,IAAQ+B,QAAxB,SACI,wBAAQC,QA1CE,WAC1B3B,GAAc,IAyC0CN,UAAU,MAAlD,iC,uBCrCTkC,UA1BE,WACb,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACCC,EAAQG,KAAK,aAGlB,CAACJ,EAAQC,IAUZ,OACI,cAAC,IAAM7B,SAAP,UACI,cAAC,EAAD,CAAWa,UAAsB,YAAXe,EAAsBlB,WAV5B,SAACuB,GAIrBC,QAAQC,IAAIF,GACZN,EAAYM","file":"static/js/6.39ce3096.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1CApO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__10wcH\",\"control\":\"QuoteForm_control__1SG0D\",\"actions\":\"QuoteForm_actions__qFNAm\",\"loading\":\"QuoteForm_loading__3ZnWb\"};","import classes from './styles/Card.module.css';\n\nconst Card = (props: any) => {\n    return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;","import React, { useRef, useState } from 'react';\nimport Card from '../../UI/card/Card';\nimport LoadingSpinner from '../../UI/loadingSpinner/LoadingSpinner';\nimport classes from './styles/QuoteForm.module.css';\n// import {  } from 'react-router-dom';\n\ninterface IQuoteForm {\n    isLoading?: boolean;\n    onAddQuote: (a: { author: string; text: string }) => void;\n}\n\nconst QuoteForm = (props: IQuoteForm) => {\n    const [isEntering, setIsEntering] = useState(false);\n    const authorInputRef = useRef<HTMLInputElement>(null);\n    const textInputRef = useRef<HTMLTextAreaElement>(null);\n\n    function submitFormHandler(event: React.FormEvent) {\n        event.preventDefault();\n\n        const enteredAuthor = authorInputRef.current!.value;\n        const enteredText = textInputRef.current!.value;\n\n        // optional: Could validate here\n\n        props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    }\n\n    const finishEnteringHandler = () => {\n        setIsEntering(false);\n    };\n\n    const formFocusHandler = () => {\n        setIsEntering(true);\n    };\n\n    return (\n        <React.Fragment>\n            {/* when the user accidentally leaves the page */}\n            {/* <Prompt\n                when={isEntering}\n                message={location =>\n                    'Are you sure you want to leave? All your entered data will be lost!'\n                }\n            /> */}\n            <Card>\n                <form\n                    onFocus={formFocusHandler}\n                    className={classes.form}\n                    onSubmit={submitFormHandler}\n                >\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor=\"author\">Author</label>\n                        <input type=\"text\" id=\"author\" ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor=\"text\">Text</label>\n                        <textarea\n                            id=\"text\"\n                            rows={5}\n                            ref={textInputRef}\n                        ></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button onClick={finishEnteringHandler} className=\"btn\">\n                            Add Quote\n                        </button>\n                    </div>\n                </form>\n            </Card>\n        </React.Fragment>\n    );\n};\n\nexport default QuoteForm;\n","import React, {useEffect} from 'react';\r\nimport QuoteForm from '../../components/quotes/quoteForm/QuoteForm';\r\nimport { useHistory, useRouteMatch } from 'react-router-dom';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { addComment, addQuote } from '../../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const  {sendRequest, status} =  useHttp(addQuote)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(status === 'completed'){\r\n            history.push('/quotes')\r\n        }\r\n\r\n    }, [status, history])\r\n\r\n    const addQuoteHandler = (quoteData: any) => {\r\n        // with push we can go back\r\n        //with replace we cannot go back\r\n        // history.replace('/quotes');\r\n        console.log(quoteData)\r\n        sendRequest(quoteData)\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}