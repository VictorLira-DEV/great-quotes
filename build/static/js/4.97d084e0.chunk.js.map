{"version":3,"sources":["components/comments/comments/styles/Comments.module.css","components/comments/newCommentForm/styles/NewCommentForm.module.css","components/comments/commentItem/styles/CommentItem.module.css","components/comments/commentsList/styles/CommentsList.module.css","components/quotes/hightlightedQuote/styles/HighlightedQuote.module.css","components/comments/newCommentForm/NewCommentForm.tsx","components/comments/commentItem/CommentItem.tsx","components/comments/commentsList/CommentsList.tsx","components/comments/comments/Comments.tsx","components/quotes/hightlightedQuote/HighlightedQuote.tsx","pages/quoteDetail/QuoteDetail.tsx"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.97d084e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1V_HL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__8MeqD\",\"control\":\"NewCommentForm_control__2qCEF\",\"actions\":\"NewCommentForm_actions__17Dbl\",\"loading\":\"NewCommentForm_loading__1aXep\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__Nuc_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2lEVF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3qFxn\"};","import React, { useRef, useEffect } from 'react';\nimport useHttp from '../../../hooks/use-http';\nimport { addComment } from '../../../lib/api';\nimport LoadingSpinner from '../../UI/loadingSpinner/LoadingSpinner';\nimport classes from './styles/NewCommentForm.module.css';\n\ninterface INewComment {\n    onAddedComment: () => void;\n    quoteId: string;\n}\n\nconst NewCommentForm = (props: INewComment) => {\n    const commentTextRef = useRef<any>();\n\n    const { sendRequest, status, error } = useHttp(addComment);\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    const submitFormHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const enteredText = commentTextRef.current.value;\n        // optional: Could validate here\n\n        // send comment to server\n        sendRequest({\n            commentData: { text: enteredText },\n            quoteId: props.quoteId\n        });\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (\n                <div className=\"centered\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor=\"comment\">Your Comment</label>\n                <textarea id=\"comment\" ref={commentTextRef}></textarea>\n                {/*rows=\"5\"*/}\n            </div>\n            <div className={classes.actions}>\n                <button className=\"btn\">Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './styles/CommentItem.module.css';\n\nconst CommentItem = (props: any) => {\n    return (\n        <li className={classes.item}>\n            <p>{props.text}</p>\n        </li>\n    );\n};\n\nexport default CommentItem;\n","import CommentItem from '../commentItem/CommentItem';\nimport classes from './styles/CommentsList.module.css';\n\nconst CommentsList = (props: any) => {\n    return (\n        <ul className={classes.comments}>\n            {props.comments.map((comment: any) => (\n                <CommentItem key={comment.id} text={comment.text} />\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentsList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './styles/Comments.module.css';\nimport NewCommentForm from '../newCommentForm/NewCommentForm';\nimport useHttp from '../../../hooks/use-http';\nimport { getAllComments } from '../../../lib/api';\nimport LoadingSpinner from '../../UI/loadingSpinner/LoadingSpinner';\nimport CommentsList from '../commentsList/CommentsList';\nimport { useCallback } from 'react';\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n    const { quoteId }: any = params;\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [quoteId, sendRequest]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n    if (status === 'pending') {\n        comments = (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    if (\n        status === 'completed' &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p className=\"centered\"> No comments were added </p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className=\"btn\" onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addedCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './styles/HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props: any) => {\n    return (\n        <figure className={classes.quote}>\n            <p>{props.text}</p>\n            <figcaption>{props.author}</figcaption>\n        </figure>\n    );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport { Fragment, useEffect } from 'react';\r\nimport Comments from '../../components/comments/comments/Comments';\r\nimport HighLightedQuote from '../../components/quotes/hightlightedQuote/HighlightedQuote';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getSingleQuote } from '../../lib/api';\r\nimport LoadingSpinner from '../../components/UI/loadingSpinner/LoadingSpinner';\r\n\r\ninterface IParams {\r\n    quoteId: string;\r\n}\r\n\r\nconst QuoteDetail = () => {\r\n    // useRouteMatch() return object of that page we are currently on\r\n    // it knows the parent path when we are nested\r\n    const match = useRouteMatch();\r\n    /*we got access to the id we defined on \"/quotes/:quoteId with useParams()\"*/\r\n    const params: IParams = useParams();\r\n    const { quoteId } = params;\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuote,\r\n        error,\r\n    } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if(status === 'pending'){\r\n        return(\r\n            <div className=\"centered\">\r\n                <LoadingSpinner/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(error){\r\n        return <p className='centered'>\r\n            {error}\r\n        </p>\r\n    }\r\n\r\n    if (!loadedQuote) {\r\n        return <p>No quote found</p>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1>Quote detail page</h1>\r\n            <HighLightedQuote text={loadedQuote?.text} author={loadedQuote?.author} />\r\n            {/* put exact in the end so we can match the full path and not just the begining */}\r\n            <Route path={match.path} exact>\r\n                <div className=\"centered\">\r\n                    <Link to={`${match.url}/comments`} className=\"btn--flat\">\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n\r\n            {/* nested route */}\r\n            <Route path={`${match.path}/comments`} exact>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}