{"version":3,"sources":["components/quotes/noQuotesFound/styles/NoQuotesFound.module.css","components/quotes/quoteItem/styles/QuoteItem.module.css","components/quotes/quoteList/styles/QuoteList.module.css","components/quotes/noQuotesFound/NoQuotesFound.tsx","components/quotes/quoteItem/QuoteItem.tsx","components/quotes/quoteList/QuoteList.tsx","pages/allQuotes/AllQuotes.tsx"],"names":["module","exports","NoQuotesFound","className","classes","noquotes","to","QuoteItem","props","item","text","author","id","QuoteList","history","useHistory","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,iFCW5CC,EATO,WAClB,OACI,sBAAKC,UAAWC,IAAQC,SAAxB,UACI,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,6B,iBCYGI,EAhBG,SAACC,GACf,OACI,qBAAIL,UAAWC,IAAQK,KAAvB,UACI,mCACI,qCACI,4BAAID,EAAME,SAEd,qCAAaF,EAAMG,YAEvB,cAAC,IAAD,CAAML,GAAE,kBAAaE,EAAMI,IAAMT,UAAU,MAA3C,iC,wBCwDGU,EAvCG,SAACL,GACf,IAAMM,EAAUC,cAEVC,EAAWC,cACpBC,QAAQC,IAAIH,GACT,IAfgBI,EAAwBC,EAgBlCC,EAAiD,QADnC,IAAIC,gBAAgBP,EAASQ,QACVC,IAAI,QACrCC,GAjBUN,EAiBgBZ,EAAMY,OAjBEC,EAiBMC,EAhBvCF,EAAOO,MAAK,SAACC,EAAQC,GACxB,OAAIR,EACOO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAuB5C,OACI,eAAC,WAAD,WACI,qBAAKT,UAAWC,IAAQ0B,QAAxB,SACI,yBAAQ3B,UAAU,GAAG4B,QAZJ,WAC/BjB,EAAQkB,KAAK,CACZC,SAAUjB,EAASiB,SACnBT,OAAO,SAAD,OAAWF,EAAqB,OAAS,UASlC,kBACUA,EAAqB,aAAe,iBAGlD,oBAAInB,UAAWC,IAAQ8B,KAAvB,SACKR,EAAaS,KAAI,SAAAC,GAAK,OACnB,cAAC,EAAD,CAEIxB,GAAIwB,EAAMxB,GACVD,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMxB,a,wBCZpByB,UAtCG,WACd,MAKIC,YAAQC,KAAc,GAJtBC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACMC,EAHV,EAGIC,KACAC,EAJJ,EAIIA,MAOJ,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EAEI,qBAAKtC,UAAU,WAAf,SACI,cAAC2C,EAAA,EAAD,MAKRF,EACO,oBAAGzC,UAAU,mBAAb,cAAkCyC,EAAlC,OAII,cAAXH,GACEC,GAAwC,IAAxBA,EAAaK,OAM/B,8BACI,cAAC,EAAD,CAAW3B,OAAQsB,MALhB,cAAC,EAAD","file":"static/js/5.4674236e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3QFXg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3-nGB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__32-ey\",\"sorting\":\"QuoteList_sorting__3TpIg\"};","import classes from './styles/NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom'\n\nconst NoQuotesFound = () => {\n    return (\n        <div className={classes.noquotes}>\n            <p>No quotes found!</p>\n            <Link to=\"/new-quote\" className=\"btn\">Add a Quote</Link>\n        </div>\n    );\n};\n\nexport default NoQuotesFound;\n","import classes from './styles/QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props: any) => {\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link to={`/quotes/${props.id}`} className=\"btn\">\n                View Fullscreen\n            </Link>\n        </li>\n    );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport QuoteItem from '../quoteItem/QuoteItem';\nimport classes from './styles/QuoteList.module.css';\nimport { useHistory, useLocation } from 'react-router-dom';\n\ninterface IQuoteList {\n    quotes: {\n        id: string;\n        author: string;\n        text: string;\n    }[];\n}\n\ninterface IquoteObject {\n    id: string;\n    author: string;\n    text: string;\n}\n\nconst sortQuotes = (quotes: IquoteObject[], ascending: boolean) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props: IQuoteList) => {\n    const history = useHistory();\n    // with use location we can get the current url\n    const location = useLocation();\n\tconsole.log(location)\n    const queryParams = new URLSearchParams(location.search);\n    const isSortingAscending = queryParams.get('sort') === 'asc';\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n    const changeSortingHandler = () => {\n\t\thistory.push({\n\t\t\tpathname: location.pathname,\n\t\t\tsearch: `?sort=${isSortingAscending ? 'desc' : 'asc'}`\n\t\t})\n        // \"? is a query paramenter\"\n        // history also allow us to change the url\n    };\n\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button className=\"\" onClick={changeSortingHandler}>\n                    Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n                </button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map(quote => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n","import { useEffect } from 'react';\r\nimport NoQuotesFound from '../../components/quotes/noQuotesFound/NoQuotesFound';\r\nimport QuoteList from '../../components/quotes/quoteList/QuoteList';\r\nimport LoadingSpinner from '../../components/UI/loadingSpinner/LoadingSpinner';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getAllQuotes } from '../../lib/api';\r\n\r\nconst AllQuotes = () => {\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuotes,\r\n        error,\r\n    } = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"centered focused\"> {error} </p>;\r\n    }\r\n\r\n    if (\r\n        status === 'completed' &&\r\n        (!loadedQuotes || loadedQuotes.length === 0)\r\n    ) {\r\n        return <NoQuotesFound />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <QuoteList quotes={loadedQuotes} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}